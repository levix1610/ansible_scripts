# This playbook is to apply all the current app deployments I have for my microk8s cluster

---
- name: deploy_applications.yaml
  hosts: k8s_control_plane[0]
  become: no
  vars:
    manifests_path: "~/microk8s-test-cluster-repo" # Define path once for clarity

  tasks:
    # 1. Clone the repository
    - name: Clone or update Kubernetes deployment repository
      ansible.builtin.git:
        repo: 'https://github.com/levix1610/microk8s-test-cluster-repo.git'
        dest: "{{ manifests_path }}"
        version: main
        force: yes # makes sure to pull the latest

    # --- PASS 1: DEPLOY NAMESPACES ONLY ---
    - name: 2. Deploy all Namespaces from the dedicated 'namespaces' subdirectory
      block:
        - name: Find Namespace manifest files
          ansible.builtin.find:
            paths: "{{ manifests_path }}/namespaces" # Targets the specific folder
            patterns: "*.yaml,*.yml"
            recurse: no
          register: namespace_manifests
          
        - name: Deploy Namespaces
          kubernetes.core.k8s:
            state: present
            src: "{{ item.path }}"
          loop: "{{ namespace_manifests.files }}"
          loop_control:
            label: "Namespace: {{ item.path | basename }}"

    # --- PASS 2: DEPLOY APPLICATIONS (EVERYTHING ELSE) ---
    - name: 3. Deploy all other application manifests recursively
      block:
        - name: Find application manifest files, excluding the 'namespaces' subdirectory
          ansible.builtin.find:
            paths: "{{ manifests_path }}"
            patterns: "*.yaml,*.yml"
            recurse: yes
            excludes:  # Exclude the directory already processed
              - namespaces 
          register: app_manifests
          
        - name: Deploy Application Resources
          kubernetes.core.k8s:
            state: present
            src: "{{ item.path }}"
          loop: "{{ app_manifests.files }}"
          loop_control:
            label: "App: {{ item.path | basename }}"
            
          # Resilience to DQLite/Database Lock Errors
          register: deployment_result
          retries: 20       # Try up to 20 times
          delay: 10         # Wait 10 seconds between attempts (200 seconds total)
          until: >
            deployment_result is success
            or ('database is locked' not in deployment_result.msg | default(''))