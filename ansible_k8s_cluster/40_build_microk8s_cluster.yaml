# This is to build out the cluster and join up all the nodes as specified.
# The first 3 nodes are 'control plane' nodes well the last two are worker nodes.

# WORK IN PROGRESS

---
# Play 1: Create the cluster
- name: Create the cluster
  hosts: k8s_control_plane[1:], k8s_workers
  become: yes
  serial: 1  # Tells the playbook to process each one individually and one at a time with a unique join token for each.
  tasks:
    - name: Generate a fresh join token for the current host
      ansible.builtin.shell: microk8s add-node
      run_once: true
      delegate_to: "{{ groups['k8s_control_plane'][0] }}" # delegates the first server in the list to act as the main Node to join all others against 
      register: token_output

    - name: Run join command
      ansible.builtin.shell: "{{ token_output.stdout | regex_search('microk8s join .*') }} --worker"  # This parses out the join command and leave out all the extra output of the command
      when: inventory_hostname in groups['k8s_workers'] # goes well items still exist in the inventory list in the workers section

    - name: Run join command for control plane
      ansible.builtin.shell: "{{ token_output.stdout | regex_search('microk8s join .*') }}" # This parses out the join command and leave out all the extra output of the command 
      when: inventory_hostname in groups['k8s_control_plane'] # goes well items still exist in the inventory list for the control plane section

# Play 2: Configure cluster add-ons
- name: Configure cluster add-ons
  hosts: k8s_control_plane[0]
  become: yes
  tasks:
    # 1. Enable metrics-server
    - name: Enable metrics-server add-on (idempotent) # operation will produce the same result every time it is run, regardless of the system's initial state.
      ansible.builtin.shell: microk8s enable metrics-server
      register: result
      # 1. Set retries and delay high enough for the service to become reachable
      retries: 8
      delay: 15 # Wait 15 seconds between attempts
      until: 
        # 2. Add success condition: command must return 0 OR contain 'is already enabled'
        - result.rc == 0
        - "'is already enabled' in result.stderr"

    # 2. Enable MetalLB add-on
    - name: Enable MetalLB add-on (idempotent) # operation will produce the same result every time it is run, regardless of the system's initial state.
      ansible.builtin.shell: "microk8s enable metallb:{{metalLB_ip_range}}" # MetalLB Range for default Lan of test cluster - Will also need to move to a variable for environments
      register: result
      retries: 8
      delay: 15 # Give the system time to handle the network configuration
      until: 
        # Define SUCCESS:
        # 1. Command returns a clean exit code (rc=0) 
        # 2. Command reports it's already in the desired state
        - result.rc == 0
        - "'is already enabled' in result.stderr"