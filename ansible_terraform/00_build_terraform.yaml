# Ansible script to run terraform Microk8s build
# Multi-environment Script - See Inventory to modify variables 

# Note: Variables (clone_dir, tf_working_dir, tfvars_file, env_script_path) 
# are inherited from your inventory file.

---
- name: Execute Terraform deployment on remote server
  hosts: ssh_server
  gather_facts: no # No need to collect facts for this process
  
  
  tasks:
    
   # 1. Clone the repository
    - name: Clone or update terraform deployment repository
      ansible.builtin.git:
        repo: 'https://github.com/levix1610/terraform_scripts.git'
        dest: "{{ clone_dir }}"
        version: main
        force: yes # makes sure to pull the latest
        
# -----------------------------------------------------------------------------

  # 2. Run terraform init
    - name: Initialize Terraform backend and modules
      ansible.builtin.command: terraform init
      args:
        # Crucial: Change the directory to the location of the .tf files
        chdir: "{{ tf_working_dir }}"
      register: tf_init_output
      
    - name: Display Terraform init output (optional)
      ansible.builtin.debug:
        msg: "{{ tf_init_output.stdout_lines }}"

  # 3. Run terraform apply
    - name: Run Terraform apply using the specific .tfvars file
      # Changed 'source' to the POSIX-compliant '.' (dot space) operator
      # The -auto-approve flag is necessary for Ansible to run non-interactively
      ansible.builtin.shell:  |
        . {{ env_script_path }} 
        terraform apply -auto-approve -var-file={{ tfvars_file }}
      args:
        # Crucial: Execute the command from inside the working directory
        chdir: "{{ tf_working_dir }}"
      register: tf_apply_output
      
    - name: Display Terraform apply output
      ansible.builtin.debug:
        msg: "{{ tf_apply_output.stdout_lines }}"      