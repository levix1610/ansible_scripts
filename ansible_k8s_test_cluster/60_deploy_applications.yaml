# This playbook is to apply all the current app deployments - Pushes Docker Hub Account to Cluster

---
- name: deploy_applications.yaml - Deploy Apps and Secrets to MicroK8s
  hosts: k8s_control_plane[0]
  become: no
  vars:
    # Path to clone the manifests repository
    manifests_path: "~/microk8s-test-cluster-repo" 
    
    # Credentials from Semaphore key store
    docker_hub_username: "{{ lookup('credential', 'Docker Hub Login', 'username') }}"
    docker_hub_password: "{{ lookup('credential', 'Docker Hub Login', 'password') }}"
    
    # Namespaces that need the secret applied to
    target_namespaces:
      - default
      - homarr
      - media
      - pihole

  tasks:

    # PHASE 1: PREPARATION AND MANIFEST GATHERING

    - name: 1. Clone or update Kubernetes deployment repository (MOVED TO TOP)
      ansible.builtin.git:
        repo: 'https://github.com/levix1610/microk8s-test-cluster-repo.git'
        dest: "{{ manifests_path }}"
        version: main
        force: yes

    # PHASE 2: NAMESPACE CREATION AND SECRET SETUP
    
    # Ensure the target namespaces exist before creating secrets
    - name: 2. Deploy all Namespaces from the dedicated 'namespaces' subdirectory
      ansible.builtin.find:
          paths: "{{ manifests_path }}/namespaces"
          patterns: "*.yaml,*.yml"
          recurse: no
      register: namespace_manifests
      
    - name: 2.1 Apply Namespace Manifests to create namespaces
      kubernetes.core.k8s:
        state: present
        src: "{{ item.path }}"
      loop: "{{ namespace_manifests.files }}"
      loop_control:
        label: "Namespace Creation: {{ item.path | basename }}"

    # 3. Generate the base64-encoded .dockerconfigjson structure
    - name: 3. Generate the base64-encoded .dockerconfigjson structure
      ansible.builtin.set_fact:
        docker_config_json: >
          {
            "auths": {
              "https://index.docker.io/v1/": {
                "username": "{{ docker_hub_username }}",
                "password": "{{ docker_hub_password }}",
                "auth": "{{ (docker_hub_username + ':' + docker_hub_password) | b64encode }}"
              }
            }
          }
      no_log: true # To make sure secrets do not appear in logs
      run_once: true

    # 4. Create or Update Kubernetes Image Pull Secret in ALL namespaces
    - name: 4. Create 'docker-hub-pull-secret' in namespace {{ item }}
      kubernetes.core.k8s_secret:
        state: present
        namespace: "{{ item }}" 
        name: docker-hub-pull-secret
        type: kubernetes.io/dockerconfigjson
        data:
          .dockerconfigjson: "{{ docker_config_json | to_json | b64encode }}"
      loop: "{{ target_namespaces }}" 
      loop_control:
        label: "Secret: docker-hub-pull-secret in {{ item }}"

    # PHASE 3: APPLICATION DEPLOYMENT

    # 5. Deploy all other application manifests recursively
    - name: 5. Deploy all other application manifests recursively
      block:
        - name: Find application manifest files, excluding the 'namespaces' subdirectory
          ansible.builtin.find:
            paths: "{{ manifests_path }}"
            patterns: "*.yaml,*.yml"
            recurse: yes
            excludes:
              - namespaces # Exclude the directory already processed
          register: app_manifests
          
        - name: Deploy Application Resources
          kubernetes.core.k8s:
            state: present
            src: "{{ item.path }}"
          loop: "{{ app_manifests.files }}"
          loop_control:
            label: "App: {{ item.path | basename }}"
            
          # Resilience to DQLite/Database Lock Errors
          register: deployment_result
          retries: 20       
          delay: 10         
          until: deployment_result is success
                 or ('database is locked' not in deployment_result.msg | default(''))